services:

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-server
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami/kafka"
    environment:
      # KRaft Configuration (sin Zookeeper)
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-server:19093
      # KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka-server:9093,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka-server:19093
      # KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      # KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9093,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      #KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Configuración del cluster
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Auto-crear tópicos
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      # Configuración de logs
      KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_CFG_LOG_FLUSH_INTERVAL_MS: 1000
      KAFKA_CFG_LOG_RETENTION_BYTES: 1073741824
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS: 300000
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      # JMX para monitoring
      KAFKA_CFG_JMX_PORT: 9094
      # Bitnami específico
      ALLOW_PLAINTEXT_LISTENER: yes #
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
    networks:
      - mylocalnetwork
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8093:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: bitnami-kraft
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server:9093
      KAFKA_CLUSTERS_0_METRICS_PORT: 9094
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - mylocalnetwork

  mongo:
    image: mongo:latest
    container_name: mongodb-server
    ports:
      - "27017:27017"
    volumes:
      - "mongodb_data:/data/db"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    networks:
      - mylocalnetwork

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8092:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    depends_on:
      - mongo
    networks:
      - mylocalnetwork

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/data"
    environment:
      REDIS_PASSWORD: pass
    command: >
      redis-server
      --requirepass pass
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    networks:
      - mylocalnetwork
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "pass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-ui
    restart: unless-stopped
    ports:
      - "8094:8081"
    environment:
      REDIS_HOSTS: redis-server:redis-server:6379:0:pass
      HTTP_USER: admin
      HTTP_PASSWORD: pass
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mylocalnetwork

volumes:
  kafka_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  mylocalnetwork:
    driver: bridge
